/**
 * Script de inicializa√ß√£o manual da simula√ß√£o
 * Este script √© executado pelo console ou pelo bot√£o para garantir
 * que todos os callbacks e event listeners sejam configurados corretamente
 */

function initializeSimulation() {
    console.log("üöÄ Inicializando simula√ß√£o manualmente...");
    
    try {
        // Verificar se a simula√ß√£o global existe
        if (!window.simulation) {
            console.error("‚ùå ERRO: Simula√ß√£o global n√£o encontrada");
            return false;
        }
        
        // Verificar componentes cr√≠ticos
        const simulation = window.simulation;
        
        if (!simulation.entityManager) {
            console.error("‚ùå ERRO: EntityManager n√£o encontrado");
            return false;
        }
        
        if (!simulation.controlSystem) {
            console.error("‚ùå ERRO: ControlSystem n√£o encontrado");
            return false;
        }
        
        // For√ßar inicializa√ß√£o completa
        if (typeof simulation.postInitialize === 'function') {
            console.log("üîÑ Chamando postInitialize para configurar callbacks e event listeners");
            simulation.postInitialize();
        }
        
        // Garantir que o m√©todo addMultipleBacteria est√° dispon√≠vel
        if (typeof simulation.entityManager.addMultipleBacteria !== 'function') {
            console.warn("‚ö†Ô∏è M√©todo addMultipleBacteria n√£o encontrado, criando...");
            
            // Implementar m√©todo alternativo
            simulation.entityManager.addMultipleBacteria = function(count, femaleRatio) {
                console.log(`üîÑ M√©todo tempor√°rio addMultipleBacteria chamado: ${count} bact√©rias, ${femaleRatio}% f√™meas`);
                
                try {
                    // Inicializar array de bact√©rias se n√£o existir
                    this.bacteria = this.bacteria || [];
                    
                    // Ajustar valores
                    count = Math.max(1, Math.min(100, count));
                    femaleRatio = Math.max(0, Math.min(100, femaleRatio));
                    
                    // Calcular n√∫mero de f√™meas
                    const femaleCount = Math.round(count * (femaleRatio / 100));
                    console.log(`üìä F√™meas a criar: ${femaleCount} de ${count}`);
                    
                    // Armazenar quantidade atual para verificar sucesso
                    const initialCount = this.bacteria.length;
                    console.log(`üìä Quantidade inicial: ${initialCount} bact√©rias`);
                    
                    // Criar bact√©rias
                    for (let i = 0; i < count; i++) {
                        try {
                            // Definir g√™nero
                            const isFemale = i < femaleCount;
                            
                            // Gerar posi√ß√£o aleat√≥ria
                            const x = random(width * 0.1, width * 0.9);
                            const y = random(height * 0.1, height * 0.9);
                            
                            // Criar bact√©ria
                            const bacteria = new window.Bacteria({
                                x: x,
                                y: y,
                                isFemale: isFemale,
                                energy: 150,
                                initialEnergy: 150,
                                initialState: "exploring",
                                simulation: simulation
                            });
                            
                            // Adicionar √† lista
                            if (bacteria) {
                                this.bacteria.push(bacteria);
                                console.log(`‚úÖ Bact√©ria ${i+1} criada: pos=(${x.toFixed(0)},${y.toFixed(0)}), ${isFemale ? 'F' : 'M'}`);
                            }
                        } catch (error) {
                            console.error(`‚ùå Erro ao criar bact√©ria ${i+1}:`, error);
                        }
                    }
                    
                    // Verificar sucesso
                    const finalCount = this.bacteria.length;
                    const addedCount = finalCount - initialCount;
                    console.log(`üìä Adicionadas ${addedCount} de ${count} bact√©rias. Total: ${finalCount}`);
                    
                    return addedCount;
                } catch (error) {
                    console.error("‚ùå Erro no m√©todo alternativo addMultipleBacteria:", error);
                    return 0;
                }
            };
            
            console.log("‚úÖ M√©todo alternativo addMultipleBacteria criado com sucesso");
        }
        
        // Adicionar bot√£o para adicionar bact√©rias manualmente
        if (typeof createButton === 'function') {
            try {
                console.log("üîÑ Criando bot√£o de emerg√™ncia para adicionar bact√©rias");
                
                const emergencyButton = createButton('‚ö†Ô∏è Adicionar Bact√©rias [Emerg√™ncia]');
                emergencyButton.position(10, height - 40);
                emergencyButton.size(250, 30);
                emergencyButton.style('background-color', '#ff5722');
                emergencyButton.style('color', 'white');
                emergencyButton.style('border', 'none');
                emergencyButton.style('border-radius', '4px');
                emergencyButton.style('cursor', 'pointer');
                emergencyButton.style('font-weight', 'bold');
                
                emergencyButton.mousePressed(() => {
                    console.log("üñ±Ô∏è Bot√£o de emerg√™ncia clicado");
                    
                    // Adicionar 10 bact√©rias com 50% de f√™meas
                    simulation.entityManager.addMultipleBacteria(10, 50);
                });
                
                console.log("‚úÖ Bot√£o de emerg√™ncia criado com sucesso");
            } catch (error) {
                console.error("‚ùå Erro ao criar bot√£o de emerg√™ncia:", error);
            }
        }
        
        console.log("‚úÖ Simula√ß√£o inicializada com sucesso");
        return true;
    } catch (error) {
        console.error("‚ùå ERRO durante inicializa√ß√£o manual:", error);
        return false;
    }
}

// Executar inicializa√ß√£o
window.addEventListener('load', () => {
    // Esperar 3 segundos para garantir que tudo foi carregado
    setTimeout(() => {
        console.log("‚è±Ô∏è Iniciando inicializa√ß√£o manual da simula√ß√£o ap√≥s 3 segundos de carregamento");
        const success = initializeSimulation();
        console.log(`üì£ Inicializa√ß√£o manual ${success ? 'bem-sucedida' : 'falhou'}`);
    }, 3000);
});

// Tornar a fun√ß√£o dispon√≠vel globalmente
window.initializeSimulation = initializeSimulation; 